# -*- coding: utf-8 -*-
"""R2_amexBowl.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r41IWb-2pAuG9sFU77vttmCLwPXVLafc
"""

# setting up the environment by importing necessary libraries and loading preprossed [Filtering has alrady been done on the excel file using power query] bowler data from an Excel file
import pandas as pd
import numpy as   np
df_bowler = pd.read_excel('round2_working_Bowler.xlsx')
df_bowler.info()

df_bowler = df_bowler[['runs','match id', 'bowler_id','wicket_count','balls_bowled','economy','match_dt']]
df_bowler
#  narrowing down the bowler data to focus on specific metrics and the match details.

# Calculating for various metrics needed for analysis and Handling potential division by zero errors
df_bowler['runs_conceded'] = (df_bowler['economy']*(df_bowler['balls_bowled']/6))
df_bowler['bowling_average'] = (df_bowler['runs_conceded'] / df_bowler['wicket_count'])
df_bowler['bowling_average'].replace([np.inf, -np.inf],np.nan, inplace = True)
df_bowler['bowling_strike_rate'] = (df_bowler['balls_bowled']/df_bowler['wicket_count'])
df_bowler['bowling_strike_rate'].replace([np.inf, -np.inf],np.nan, inplace = True)
df_bowler

# trimming the range as per guidelines
df_bowler = df_bowler[(df_bowler['match id']>=8000000) & (df_bowler['match id' ]<=10000000) &
        (df_bowler['bowler_id']>=36000) &   (df_bowler['bowler_id']<=10000000)]
df_bowler

# # Calculating average bowling statistics for each bowler
bowler_stats = df_bowler.groupby('bowler_id').agg(
    average_bowling_avg = ('bowling_average', 'mean'),
    avg_bowling_strike_rate = ('bowling_strike_rate', 'mean'),
    average_economy = ('economy', 'mean'),
).reset_index()
bowler_stats

# I am calculating the total wickets taken by each bowler and the number of matches where they took four or more wickets, adding these statistics to the bowler_stats DataFrame.
wickets_by_player = df_bowler.groupby('bowler_id')['wicket_count'].sum()
bowler_stats['total_wickets'] = bowler_stats['bowler_id'].map(wickets_by_player)

four_or_more_wickets = df_bowler[df_bowler['wicket_count'] >= 4]
matches_with_four_or_more = four_or_more_wickets.groupby('bowler_id')['match id'].count()
bowler_stats['four_wicket'] = bowler_stats['bowler_id'].map(matches_with_four_or_more)
bowler_stats['four_wicket'].fillna(0, inplace=True)
bowler_stats['total_wickets'].fillna(0, inplace=True)

#  Initialize points columns
bowler_stats['bowling_avg_points'] = 0
bowler_stats['economy_points'] = 0
bowler_stats['strike_rate_points'] = 0
bowler_stats['four_wicket_points'] = 0

# Assign points based on performance metrics

for i in range(len(bowler_stats)):
    if bowler_stats['average_bowling_avg'].iloc[i] <= 20:
        bowler_stats.at[i, 'bowling_avg_points'] = 30
    elif bowler_stats['average_bowling_avg'].iloc[i] <= 30:
        bowler_stats.at[i, 'bowling_avg_points'] = 20
    elif bowler_stats['average_bowling_avg'].iloc[i] <= 40:
        bowler_stats.at[i, 'bowling_avg_points'] = 10
    else :bowler_stats.at[i, 'bowling_avg_points'] = 0

for i in range(len(bowler_stats)):
    if bowler_stats['average_economy'].iloc[i] <= 3:
        bowler_stats.at[i, 'economy_points'] = 50
    elif bowler_stats['average_economy'].iloc[i] <= 5:
        bowler_stats.at[i, 'economy_points'] = 40
    elif bowler_stats['average_economy'].iloc[i] < 7:
        bowler_stats.at[i, 'economy_points'] = 30
    else :bowler_stats.at[i, 'economy_points'] = 0


for i in range(len(bowler_stats)):
    if bowler_stats['avg_bowling_strike_rate'].iloc[i] <= 15:
        bowler_stats.at[i, 'strike_rate_points'] = 30
    elif bowler_stats['avg_bowling_strike_rate'].iloc[i] <= 19:
        bowler_stats.at[i, 'strike_rate_points'] = 20
    elif bowler_stats['avg_bowling_strike_rate'].iloc[i] <= 24:
        bowler_stats.at[i, 'strike_rate_points'] = 10
    else :bowler_stats.at[i, 'strike_rate_points'] = 0

for i in range(len(bowler_stats)):
    if bowler_stats['four_wicket'].iloc[i] >= 4:
        bowler_stats.at[i, 'four_wicket_points'] = 30
    elif bowler_stats['four_wicket'].iloc[i] >= 2:
        bowler_stats.at[i, 'four_wicket_points'] = 20
    elif bowler_stats['four_wicket'].iloc[i] == 1:
        bowler_stats.at[i, 'four_wicket_points'] = 10
    else :bowler_stats.at[i, 'four_wicket_points'] = 0

bowler_stats['total_points'] = bowler_stats['bowling_avg_points'] + bowler_stats['economy_points'] + bowler_stats['strike_rate_points'] + bowler_stats['four_wicket_points']

# totalling up the points and using the top bowlers by points to check for consistency and using their stats for visualisation in Power BI
bowler_points = bowler_stats[['bowler_id','total_points']]
bowler_points=bowler_points.sort_values(by='total_points', ascending = False)
bowler_points.reset_index(drop=True)