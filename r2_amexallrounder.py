# -*- coding: utf-8 -*-
"""R2_amexAllrounder.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QC54QDxrTSSw4AaKhz9mUqi1FZRN6P2E
"""

# setting up the environment by importing necessary libraries and loading preprossed [Filtering has alrady been done on the excel file using power query] bowler data from an Excel file
import pandas as pd
import numpy as np
df_batsman = pd.read_excel('round2_working_Batsman.xlsx')
df_bowler = pd.read_excel('round2_working_Bowler.xlsx')
df_batsman.info()
df_bowler.info()

# standardization is done to facilitate merging or comparing the two DataFrames
df_batsman = df_batsman.rename(columns={'batsman_id': 'player_id'})
df_bowler = df_bowler.rename(columns={'bowler_id': 'player_id'})
df_batsman.info()
df_bowler.info()

# a inner join is used to get a df that can be used for determining top all-rounders
df_all_rounders = pd.merge(df_batsman, df_bowler,  on=['player_id','match id'])
df_all_rounders.info()

df_all_rounders.reset_index(drop=True, inplace=True)
df_all_rounders.sort_values(by='player_id')

# filtering players who have scored more than 10 runs in total, ensuring a certain level of batting proficiency. Then, identifies players who have taken wickets in at least two unique matches, demonstrating consistent bowling impact
df_all_rounders = df_all_rounders.groupby('player_id').filter(lambda x: x['runs_x'].sum() > 10)
players_with_wickets = df_all_rounders[df_all_rounders['wicket_count'] > 0].groupby('player_id')['match id'].nunique()
players_with_wickets = players_with_wickets[players_with_wickets >= 2].index.tolist()
df_all_rounders = df_all_rounders[df_all_rounders['player_id'].isin(players_with_wickets)]

# Calculating for various metrics needed for analysis and Handling potential division by zero errors
df_all_rounders['runs_conceded'] = (df_all_rounders['economy']*(df_all_rounders['balls_bowled']/6))
df_all_rounders['bowling_strike_rate'] = df_all_rounders['balls_bowled'] / df_all_rounders['wicket_count']
df_all_rounders['bowling_strike_rate'] = df_all_rounders['bowling_strike_rate'].replace([np.inf, -np.inf], np.nan)
df_all_rounders['bowling_avg'] = df_all_rounders['runs_conceded'] / df_all_rounders['wicket_count']
df_all_rounders['bowling_avg'] = df_all_rounders['bowling_avg'].replace([np.inf, -np.inf], np.nan)

df_all_rounders = df_all_rounders[['player_id', 'runs_x', 'strike_rate','economy','wicket_count','bowling_strike_rate','bowling_avg','match_dt_y']]
df_all_rounders.sort_values(by='player_id')

# I calculated the average strike rate, runs scored, economy rate, bowling strike rate, and bowling average for each all-rounder, creating a summary table of their overall performance
all_rounder_stats = df_all_rounders.groupby('player_id').agg(
    average_strike_rate=('strike_rate', 'mean'),
    average_runs=('runs_x', 'mean'),
    average_economy=('economy', 'mean'),
    average_bowling_sr=('bowling_strike_rate', 'mean'),
    average_bowling_avg=('bowling_avg', 'mean')
).reset_index()

#  summary table by including the total runs scored by each player
total_runs = df_all_rounders.groupby('player_id')['runs_x'].sum()
all_rounder_stats = all_rounder_stats.set_index('player_id')
all_rounder_stats['total_runs'] = total_runs
all_rounder_stats = all_rounder_stats.reset_index()

# I tallied the number of fifties, four-wicket hauls, and centuries for each all-rounder and began incorporating the fifties count into the summary table to highlight impactful performances
fifties = df_all_rounders[df_all_rounders['runs_x'] >= 50].groupby('player_id')['runs_x'].count()
four_wickets = df_all_rounders[df_all_rounders['wicket_count'] >= 4].groupby('player_id')['wicket_count'].count()
hundreds = df_all_rounders[df_all_rounders['runs_x'] >= 100].groupby('player_id')['runs_x'].count()

all_rounder_stats['50s'] = all_rounder_stats['player_id'].map(fifties).fillna(0).astype(int)
all_rounder_stats['four_wickets'] = all_rounder_stats['player_id'].map(four_wickets).fillna(0).astype(int)
all_rounder_stats['100s'] = all_rounder_stats['player_id'].map(hundreds).fillna(0).astype(int)
all_rounder_stats['50s'] = all_rounder_stats['50s'] - all_rounder_stats['100s']

#  Initialize points columns
all_rounder_stats = all_rounder_stats[['player_id', 'average_strike_rate', 'average_runs', '50s','100s','average_bowling_sr','average_economy','average_bowling_avg','four_wickets']]

all_rounder_stats['strike_rate_points'] = 0
all_rounder_stats['avg_points'] = 0
all_rounder_stats['50_points'] = 0
all_rounder_stats['100_points'] = 0
all_rounder_stats['bowling_strike_rate_points'] = 0
all_rounder_stats['econ_points'] = 0
all_rounder_stats['bowl_avg_points'] = 0
all_rounder_stats['four_wickets_points'] = 0

# Assign points based on defined metrics

for i in range(len(all_rounder_stats)):
    if all_rounder_stats['average_strike_rate'].iloc[i] >= 150:
        all_rounder_stats.at[i, 'strike_rate_points'] = 50
    elif all_rounder_stats['average_strike_rate'].iloc[i] >= 100:
        all_rounder_stats.at[i, 'strike_rate_points'] = 40
    elif all_rounder_stats['average_strike_rate'].iloc[i] >= 80:
        all_rounder_stats.at[i, 'strike_rate_points'] = 30
    else :all_rounder_stats.at[i, 'strike_rate_points'] = 0

for i in range(len(all_rounder_stats)):
    if all_rounder_stats['average_runs'].iloc[i] >= 50:
        all_rounder_stats.at[i, 'avg_points'] = 30
    elif all_rounder_stats['average_runs'].iloc[i] >= 40:
        all_rounder_stats.at[i, 'avg_points'] = 20
    elif all_rounder_stats['average_runs'].iloc[i] >= 30:
        all_rounder_stats.at[i, 'avg_points'] = 10
    else :all_rounder_stats.at[i, 'avg_points'] = 5


for i in range(len(all_rounder_stats)):
    if all_rounder_stats['50s'].iloc[i] >= 5:
        all_rounder_stats.at[i, '50_points'] = 20
    elif all_rounder_stats['50s'].iloc[i] >= 3:
        all_rounder_stats.at[i, '50_points'] = 10
    elif all_rounder_stats['50s'].iloc[i] >= 1:
        all_rounder_stats.at[i, '50_points'] = 5
    else :all_rounder_stats.at[i, '50_points'] = 0

for i in range(len(all_rounder_stats)):
    if all_rounder_stats['100s'].iloc[i] >= 3:
        all_rounder_stats.at[i, '100_points'] = 30
    elif all_rounder_stats['100s'].iloc[i] >= 2:
        all_rounder_stats.at[i, '100_points'] = 20
    elif all_rounder_stats['100s'].iloc[i] >= 1:
        all_rounder_stats.at[i, '100_points'] = 10
    else :all_rounder_stats.at[i, '100_points'] = 0

for i in range(len(all_rounder_stats)):
    if all_rounder_stats['average_bowling_sr'].iloc[i] <= 15:
        all_rounder_stats.at[i, 'bsr_points'] = 30
    elif all_rounder_stats['average_bowling_sr'].iloc[i] <= 19:
        all_rounder_stats.at[i, 'bsr_points'] = 20
    elif all_rounder_stats['average_bowling_sr'].iloc[i] <= 24:
        all_rounder_stats.at[i, 'bsr_points'] = 10
    else :all_rounder_stats.at[i, 'bsr_points'] = 0

for i in range(len(all_rounder_stats)):
    if all_rounder_stats['average_economy'].iloc[i] <= 3:
        all_rounder_stats.at[i, 'econ_points'] = 50
    elif all_rounder_stats['average_economy'].iloc[i] <= 5:
        all_rounder_stats.at[i, 'econ_points'] = 40
    elif all_rounder_stats['average_economy'].iloc[i] < 7:
        all_rounder_stats.at[i, 'econ_points'] = 30
    else :all_rounder_stats.at[i, 'econ_points'] = 0

for i in range(len(all_rounder_stats)):
    if all_rounder_stats['average_bowling_avg'].iloc[i] <= 20:
        all_rounder_stats.at[i, 'bowl_avg_points'] = 30
    elif all_rounder_stats['average_bowling_avg'].iloc[i] <= 30:
        all_rounder_stats.at[i, 'bowl_avg_points'] = 20
    elif all_rounder_stats['average_bowling_avg'].iloc[i] <= 40:
        all_rounder_stats.at[i, 'bowl_avg_points'] = 10
    else :all_rounder_stats.at[i, 'bowl_avg_points'] = 0

for i in range(len(all_rounder_stats)):
    if all_rounder_stats['four_wickets'].iloc[i] >= 4:
        all_rounder_stats.at[i, 'four_wickets_points'] = 30
    elif all_rounder_stats['four_wickets'].iloc[i] >= 2:
        all_rounder_stats.at[i, 'four_wickets_points'] = 20
    elif all_rounder_stats['four_wickets'].iloc[i] == 1:
        all_rounder_stats.at[i, 'four_wickets_points'] = 10
    else :all_rounder_stats.at[i, 'four_wickets_points'] = 0

all_rounder_stats['total_points'] = all_rounder_stats['strike_rate_points'] + all_rounder_stats['avg_points'] + all_rounder_stats['50_points'] + all_rounder_stats['100_points'] + all_rounder_stats['bsr_points'] + all_rounder_stats['econ_points'] + all_rounder_stats['bowl_avg_points'] + all_rounder_stats['four_wickets_points']

# I created a ranking of all-rounders based on their total points, presenting a clear leaderboard check for consistency using their stats for visualisation in Power BI of the top performers
all_rounder_pts = all_rounder_stats[['player_id','total_points']]
all_rounder_pts=all_rounder_pts.sort_values(by='total_points', ascending = False)
all_rounder_pts.reset_index(drop=True)
all_rounder_pts