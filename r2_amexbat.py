# -*- coding: utf-8 -*-
"""R2_amexBat.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bxXXB2gxnOJV7YmGZQQh9vY7oFGQdBoy
"""

# setting up the environment by importing necessary libraries and loading preprossed batsman data from an Excel file
import pandas as pd
df_batsman = pd.read_excel('round2_working_Batsman.xlsx')
df_batsman.info()

# trimming the range as per guidelines
df_batsman = df_batsman[(df_batsman['match id']>=8000000) & (df_batsman['match id' ]<=10000000) &
        (df_batsman['batsman_id']>=36000) &   (df_batsman['batsman_id']<=10000000)]
df_batsman.info()

# This code calculates and displays the total runs, balls faced, strike rate, and matches played for each batsman.
total_runs = df_batsman.groupby('batsman_id')[['runs','balls_faced','strike_rate']].sum().sort_values(by=['runs'], ascending=False)
total_runs = total_runs.reset_index()
total_runs = total_runs.merge(df_batsman.groupby('batsman_id').size().reset_index(name='matches_played'), on = 'batsman_id')
total_runs[['batsman_id','runs','balls_faced','strike_rate','matches_played']]

# calculating the number of centuries (scores of 100 or more) for each batsman.
df_count = df_batsman[df_batsman['runs'] > 99].groupby('batsman_id')['runs'].count().reset_index(name='100s')
all_batsman_ids = df_batsman['batsman_id'].unique()
df_all_batsman = pd.DataFrame({'batsman_id': all_batsman_ids, '100s': 0})
df_all_batsman = df_all_batsman.merge(df_count, on='batsman_id', how='left')
df_all_batsman['100s'] = df_all_batsman['100s_y'].fillna(df_all_batsman['100s_x'])
df_all_batsman = df_all_batsman.drop(['100s_x', '100s_y'], axis=1)

df_all_batsman[['batsman_id','100s']]

# calculating the number of fifties (scores of 50 or more which is also less than 100) for each batsman.
df_50s = df_batsman[(df_batsman['runs'] > 49) & (df_batsman['runs'] < 100)].groupby('batsman_id')['runs'].count().reset_index(name='50s')
df_all_batsman = df_all_batsman.merge(df_50s, on='batsman_id', how='left').fillna(0)
df_all_batsman[['batsman_id','100s','50s']]

# showing the combined statistics for each batsman
result_df = total_runs.merge(df_all_batsman, on='batsman_id', how='inner')

result_df[['batsman_id', 'runs', 'balls_faced', 'strike_rate', 'matches_played', '100s' , '50s']]

#  include only batsmen who have scored more than 100 runs in total
df_filteredBatsman = result_df[total_runs['runs'] > 100]
df_filteredBatsman[['batsman_id','runs','balls_faced','strike_rate','matches_played', '100s' , '50s']]

# calculating strike rate
df_filteredBatsman['avg_strike_rate'] = df_filteredBatsman['strike_rate'] / df_filteredBatsman['matches_played']
df_filteredBatsman[['batsman_id','runs','balls_faced','strike_rate','matches_played','avg_strike_rate', '100s' , '50s']]

# calculating average runs
df_filteredBatsman['avg_runs'] = df_filteredBatsman['runs'] / df_filteredBatsman['matches_played']
df_filteredBatsman

#  Assign points based on defined metrics
def calculate_strike_rate_points(avg_strike_rate):
    if avg_strike_rate >= 150:
        return 50
    elif avg_strike_rate >= 100:
        return 40
    elif avg_strike_rate >= 80:
        return 30
    else:
        return 0

df_filteredBatsman['strike_rate_points'] = df_filteredBatsman['avg_strike_rate'].apply(calculate_strike_rate_points)

df_filteredBatsman

# Assign points based on defined metrics
def calculate_avg_runs_points(avg_runs):
    if avg_runs >= 50:
        return 30
    elif avg_runs >= 40:
        return 20
    elif avg_runs >= 30:
        return 10
    else:
        return 5

df_filteredBatsman['avg_runs_points'] = df_filteredBatsman['avg_runs'].apply(calculate_avg_runs_points)

df_filteredBatsman

#  renamed columns, making it easier to understand the meaning of the data.
df_filteredBatsman = df_filteredBatsman.rename(columns={'100s': 'no_of_centuries', '50s': 'no_of_fifties'})

# Assign points based on defined metrics
def calculate_50s_points(no_of_fifties):
    if no_of_fifties >= 5:
        return 20
    elif no_of_fifties >= 3:
        return 10
    elif no_of_fifties >= 1:
        return 5
    else:
        return 0

df_filteredBatsman['50s_points'] = df_filteredBatsman['no_of_fifties'].apply(calculate_50s_points)

df_filteredBatsman

# Assign points based on defined metrics
def calculate_100s_points(no_of_centuries):
    if no_of_centuries >= 3:
        return 30
    elif no_of_centuries == 2:
        return 20
    elif no_of_centuries == 1:
        return 10
    else:
        return 0

df_filteredBatsman['100s_points'] = df_filteredBatsman['no_of_centuries'].apply(calculate_100s_points)

df_filteredBatsman

#  calculates the 'total_player_points' for each batsman
df_filteredBatsman['total_player_points'] = df_filteredBatsman['strike_rate_points'] + \
                                        df_filteredBatsman['avg_runs_points'] + \
                                        df_filteredBatsman['50s_points'] + \
                                        df_filteredBatsman['100s_points']

df_filteredBatsman

# sorts the df_filteredBatsman DataFrame in descending order based on the total_player_points
df_topbatsman = df_filteredBatsman.sort_values(by=['total_player_points'], ascending=False)
df_topbatsman = df_topbatsman.reset_index(drop=True)

# totalling up the points and using the top batsman by points to check for consistency and using their stats for visualisation in Power BI
df_topbatsman[['batsman_id','strike_rate_points','avg_runs_points','50s_points','100s_points', 'total_player_points']]